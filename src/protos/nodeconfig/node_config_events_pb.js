// source: node_config_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.nodeconfig.AddNodeConfigResponse', null, global);
goog.exportSymbol('proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus', null, global);
goog.exportSymbol('proto.nodeconfig.AllNodeConfig', null, global);
goog.exportSymbol('proto.nodeconfig.GRPCAuth', null, global);
goog.exportSymbol('proto.nodeconfig.ListNodeConfigRequest', null, global);
goog.exportSymbol('proto.nodeconfig.NodeConfig', null, global);
goog.exportSymbol('proto.nodeconfig.NodeConfig.NodeType', null, global);
goog.exportSymbol('proto.nodeconfig.NodeConfig.SZ', null, global);
goog.exportSymbol('proto.nodeconfig.NodeID', null, global);
goog.exportSymbol('proto.nodeconfig.SFTPAuth', null, global);
goog.exportSymbol('proto.nodeconfig.SFTPAuth.SFTPAuthType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.GRPCAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.GRPCAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.GRPCAuth.displayName = 'proto.nodeconfig.GRPCAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.SFTPAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.SFTPAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.SFTPAuth.displayName = 'proto.nodeconfig.SFTPAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.NodeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.NodeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.NodeConfig.displayName = 'proto.nodeconfig.NodeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.AddNodeConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.AddNodeConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.AddNodeConfigResponse.displayName = 'proto.nodeconfig.AddNodeConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.NodeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.NodeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.NodeID.displayName = 'proto.nodeconfig.NodeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.ListNodeConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nodeconfig.ListNodeConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.ListNodeConfigRequest.displayName = 'proto.nodeconfig.ListNodeConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nodeconfig.AllNodeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nodeconfig.AllNodeConfig.repeatedFields_, null);
};
goog.inherits(proto.nodeconfig.AllNodeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nodeconfig.AllNodeConfig.displayName = 'proto.nodeconfig.AllNodeConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.GRPCAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.GRPCAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.GRPCAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.GRPCAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    tlsCert: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.GRPCAuth}
 */
proto.nodeconfig.GRPCAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.GRPCAuth;
  return proto.nodeconfig.GRPCAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.GRPCAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.GRPCAuth}
 */
proto.nodeconfig.GRPCAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.GRPCAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.GRPCAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.GRPCAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.GRPCAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTlsCert();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tls_cert = 1;
 * @return {string}
 */
proto.nodeconfig.GRPCAuth.prototype.getTlsCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.GRPCAuth} returns this
 */
proto.nodeconfig.GRPCAuth.prototype.setTlsCert = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.SFTPAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.SFTPAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.SFTPAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.SFTPAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    sftpAuthType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    key: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.SFTPAuth}
 */
proto.nodeconfig.SFTPAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.SFTPAuth;
  return proto.nodeconfig.SFTPAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.SFTPAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.SFTPAuth}
 */
proto.nodeconfig.SFTPAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nodeconfig.SFTPAuth.SFTPAuthType} */ (reader.readEnum());
      msg.setSftpAuthType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.SFTPAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.SFTPAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.SFTPAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.SFTPAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSftpAuthType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nodeconfig.SFTPAuth.SFTPAuthType = {
  SFTP_AUTH_TYPE_UNSPECIFIED: 0,
  PASSWORD: 1,
  KEYBASED: 2,
  KEYPASSPHRASE: 3
};

/**
 * optional SFTPAuthType sftp_auth_type = 1;
 * @return {!proto.nodeconfig.SFTPAuth.SFTPAuthType}
 */
proto.nodeconfig.SFTPAuth.prototype.getSftpAuthType = function() {
  return /** @type {!proto.nodeconfig.SFTPAuth.SFTPAuthType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nodeconfig.SFTPAuth.SFTPAuthType} value
 * @return {!proto.nodeconfig.SFTPAuth} returns this
 */
proto.nodeconfig.SFTPAuth.prototype.setSftpAuthType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.nodeconfig.SFTPAuth.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.SFTPAuth} returns this
 */
proto.nodeconfig.SFTPAuth.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.nodeconfig.SFTPAuth.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.SFTPAuth} returns this
 */
proto.nodeconfig.SFTPAuth.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string key = 4;
 * @return {string}
 */
proto.nodeconfig.SFTPAuth.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.SFTPAuth} returns this
 */
proto.nodeconfig.SFTPAuth.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.NodeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.NodeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.NodeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.NodeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodetype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    grpcAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sftpAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sz: jspb.Message.getFieldWithDefault(msg, 6, 0),
    grpcAuth: (f = msg.getGrpcAuth()) && proto.nodeconfig.GRPCAuth.toObject(includeInstance, f),
    sftpAuth: (f = msg.getSftpAuth()) && proto.nodeconfig.SFTPAuth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.NodeConfig}
 */
proto.nodeconfig.NodeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.NodeConfig;
  return proto.nodeconfig.NodeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.NodeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.NodeConfig}
 */
proto.nodeconfig.NodeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {!proto.nodeconfig.NodeConfig.NodeType} */ (reader.readEnum());
      msg.setNodetype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpcAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSftpAddress(value);
      break;
    case 6:
      var value = /** @type {!proto.nodeconfig.NodeConfig.SZ} */ (reader.readEnum());
      msg.setSz(value);
      break;
    case 7:
      var value = new proto.nodeconfig.GRPCAuth;
      reader.readMessage(value,proto.nodeconfig.GRPCAuth.deserializeBinaryFromReader);
      msg.setGrpcAuth(value);
      break;
    case 8:
      var value = new proto.nodeconfig.SFTPAuth;
      reader.readMessage(value,proto.nodeconfig.SFTPAuth.deserializeBinaryFromReader);
      msg.setSftpAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.NodeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.NodeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.NodeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.NodeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodetype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGrpcAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSftpAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSz();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getGrpcAuth();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nodeconfig.GRPCAuth.serializeBinaryToWriter
    );
  }
  f = message.getSftpAuth();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nodeconfig.SFTPAuth.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.nodeconfig.NodeConfig.NodeType = {
  NODETYPE_UNSPECIFIED: 0,
  NODETYPE_MASTER: 1,
  NODETYPE_NODE: 2,
  NODETYPE_EXTERNAL: 3
};

/**
 * @enum {number}
 */
proto.nodeconfig.NodeConfig.SZ = {
  SZ_UNSPECIFIED: 0,
  SZ_EXTERNAL: 10,
  SZ_DMZ: 20,
  SZ_APP: 30,
  SZ_DATA: 40,
  SZ_CONTROLPLANE: 50
};

/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.nodeconfig.NodeConfig.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NodeType nodetype = 2;
 * @return {!proto.nodeconfig.NodeConfig.NodeType}
 */
proto.nodeconfig.NodeConfig.prototype.getNodetype = function() {
  return /** @type {!proto.nodeconfig.NodeConfig.NodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nodeconfig.NodeConfig.NodeType} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.setNodetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string grpc_address = 3;
 * @return {string}
 */
proto.nodeconfig.NodeConfig.prototype.getGrpcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.setGrpcAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sftp_address = 4;
 * @return {string}
 */
proto.nodeconfig.NodeConfig.prototype.getSftpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.setSftpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SZ sz = 6;
 * @return {!proto.nodeconfig.NodeConfig.SZ}
 */
proto.nodeconfig.NodeConfig.prototype.getSz = function() {
  return /** @type {!proto.nodeconfig.NodeConfig.SZ} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.nodeconfig.NodeConfig.SZ} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.setSz = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional GRPCAuth grpc_auth = 7;
 * @return {?proto.nodeconfig.GRPCAuth}
 */
proto.nodeconfig.NodeConfig.prototype.getGrpcAuth = function() {
  return /** @type{?proto.nodeconfig.GRPCAuth} */ (
    jspb.Message.getWrapperField(this, proto.nodeconfig.GRPCAuth, 7));
};


/**
 * @param {?proto.nodeconfig.GRPCAuth|undefined} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
*/
proto.nodeconfig.NodeConfig.prototype.setGrpcAuth = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.clearGrpcAuth = function() {
  return this.setGrpcAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nodeconfig.NodeConfig.prototype.hasGrpcAuth = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SFTPAuth sftp_auth = 8;
 * @return {?proto.nodeconfig.SFTPAuth}
 */
proto.nodeconfig.NodeConfig.prototype.getSftpAuth = function() {
  return /** @type{?proto.nodeconfig.SFTPAuth} */ (
    jspb.Message.getWrapperField(this, proto.nodeconfig.SFTPAuth, 8));
};


/**
 * @param {?proto.nodeconfig.SFTPAuth|undefined} value
 * @return {!proto.nodeconfig.NodeConfig} returns this
*/
proto.nodeconfig.NodeConfig.prototype.setSftpAuth = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nodeconfig.NodeConfig} returns this
 */
proto.nodeconfig.NodeConfig.prototype.clearSftpAuth = function() {
  return this.setSftpAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nodeconfig.NodeConfig.prototype.hasSftpAuth = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.AddNodeConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.AddNodeConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.AddNodeConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeEntryMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeEntryStatus: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.AddNodeConfigResponse}
 */
proto.nodeconfig.AddNodeConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.AddNodeConfigResponse;
  return proto.nodeconfig.AddNodeConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.AddNodeConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.AddNodeConfigResponse}
 */
proto.nodeconfig.AddNodeConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeEntryMessage(value);
      break;
    case 3:
      var value = /** @type {!proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus} */ (reader.readEnum());
      msg.setNodeEntryStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.AddNodeConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.AddNodeConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.AddNodeConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeEntryMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeEntryStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus = {
  NODE_ENTRY_STATUS_UNSPECIFIED: 0,
  NODE_ENTRY_STATUS_SUCCESS: 1,
  NODE_ENTRY_STATUS_ERROR: 2
};

/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.AddNodeConfigResponse} returns this
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string node_entry_message = 2;
 * @return {string}
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.getNodeEntryMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.AddNodeConfigResponse} returns this
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.setNodeEntryMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeEntryStatus node_entry_status = 3;
 * @return {!proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus}
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.getNodeEntryStatus = function() {
  return /** @type {!proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.nodeconfig.AddNodeConfigResponse.NodeEntryStatus} value
 * @return {!proto.nodeconfig.AddNodeConfigResponse} returns this
 */
proto.nodeconfig.AddNodeConfigResponse.prototype.setNodeEntryStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.NodeID.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.NodeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.NodeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.NodeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.NodeID}
 */
proto.nodeconfig.NodeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.NodeID;
  return proto.nodeconfig.NodeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.NodeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.NodeID}
 */
proto.nodeconfig.NodeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.NodeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.NodeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.NodeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.NodeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.nodeconfig.NodeID.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nodeconfig.NodeID} returns this
 */
proto.nodeconfig.NodeID.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.ListNodeConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.ListNodeConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.ListNodeConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.ListNodeConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.ListNodeConfigRequest}
 */
proto.nodeconfig.ListNodeConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.ListNodeConfigRequest;
  return proto.nodeconfig.ListNodeConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.ListNodeConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.ListNodeConfigRequest}
 */
proto.nodeconfig.ListNodeConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.ListNodeConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.ListNodeConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.ListNodeConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.ListNodeConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nodeconfig.AllNodeConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nodeconfig.AllNodeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nodeconfig.AllNodeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nodeconfig.AllNodeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.AllNodeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    allNodeConfigList: jspb.Message.toObjectList(msg.getAllNodeConfigList(),
    proto.nodeconfig.NodeConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nodeconfig.AllNodeConfig}
 */
proto.nodeconfig.AllNodeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nodeconfig.AllNodeConfig;
  return proto.nodeconfig.AllNodeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nodeconfig.AllNodeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nodeconfig.AllNodeConfig}
 */
proto.nodeconfig.AllNodeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nodeconfig.NodeConfig;
      reader.readMessage(value,proto.nodeconfig.NodeConfig.deserializeBinaryFromReader);
      msg.addAllNodeConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nodeconfig.AllNodeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nodeconfig.AllNodeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nodeconfig.AllNodeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nodeconfig.AllNodeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllNodeConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nodeconfig.NodeConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeConfig all_node_config = 1;
 * @return {!Array<!proto.nodeconfig.NodeConfig>}
 */
proto.nodeconfig.AllNodeConfig.prototype.getAllNodeConfigList = function() {
  return /** @type{!Array<!proto.nodeconfig.NodeConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nodeconfig.NodeConfig, 1));
};


/**
 * @param {!Array<!proto.nodeconfig.NodeConfig>} value
 * @return {!proto.nodeconfig.AllNodeConfig} returns this
*/
proto.nodeconfig.AllNodeConfig.prototype.setAllNodeConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nodeconfig.NodeConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nodeconfig.NodeConfig}
 */
proto.nodeconfig.AllNodeConfig.prototype.addAllNodeConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nodeconfig.NodeConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nodeconfig.AllNodeConfig} returns this
 */
proto.nodeconfig.AllNodeConfig.prototype.clearAllNodeConfigList = function() {
  return this.setAllNodeConfigList([]);
};


goog.object.extend(exports, proto.nodeconfig);
