// source: filetransfer_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.filetransfer.Condition', null, global);
goog.exportSymbol('proto.filetransfer.Condition.ConditionType', null, global);
goog.exportSymbol('proto.filetransfer.Condition.ConditionValueCase', null, global);
goog.exportSymbol('proto.filetransfer.RemoteDirectory', null, global);
goog.exportSymbol('proto.filetransfer.RemoteDirectoryCondition', null, global);
goog.exportSymbol('proto.filetransfer.RemoteDirectoryConditionTransfer', null, global);
goog.exportSymbol('proto.filetransfer.RemoteDirectoryTransfer', null, global);
goog.exportSymbol('proto.filetransfer.RemoteDirectoryTransfer.TransferType', null, global);
goog.exportSymbol('proto.filetransfer.RemoteFile', null, global);
goog.exportSymbol('proto.filetransfer.TimeValues', null, global);
goog.exportSymbol('proto.filetransfer.TransferStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.RemoteDirectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.RemoteDirectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.RemoteDirectory.displayName = 'proto.filetransfer.RemoteDirectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.RemoteFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.RemoteFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.RemoteFile.displayName = 'proto.filetransfer.RemoteFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.TimeValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.TimeValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.TimeValues.displayName = 'proto.filetransfer.TimeValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.filetransfer.Condition.oneofGroups_);
};
goog.inherits(proto.filetransfer.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.Condition.displayName = 'proto.filetransfer.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.RemoteDirectoryCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filetransfer.RemoteDirectoryCondition.repeatedFields_, null);
};
goog.inherits(proto.filetransfer.RemoteDirectoryCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.RemoteDirectoryCondition.displayName = 'proto.filetransfer.RemoteDirectoryCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.RemoteDirectoryTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.RemoteDirectoryTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.RemoteDirectoryTransfer.displayName = 'proto.filetransfer.RemoteDirectoryTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.RemoteDirectoryConditionTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.RemoteDirectoryConditionTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.RemoteDirectoryConditionTransfer.displayName = 'proto.filetransfer.RemoteDirectoryConditionTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filetransfer.TransferStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filetransfer.TransferStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filetransfer.TransferStatus.displayName = 'proto.filetransfer.TransferStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.RemoteDirectory.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.RemoteDirectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.RemoteDirectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.RemoteDirectory}
 */
proto.filetransfer.RemoteDirectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.RemoteDirectory;
  return proto.filetransfer.RemoteDirectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.RemoteDirectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.RemoteDirectory}
 */
proto.filetransfer.RemoteDirectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.RemoteDirectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.RemoteDirectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.RemoteDirectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string source_path = 1;
 * @return {string}
 */
proto.filetransfer.RemoteDirectory.prototype.getSourcePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteDirectory} returns this
 */
proto.filetransfer.RemoteDirectory.prototype.setSourcePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.RemoteFile.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.RemoteFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.RemoteFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcefile: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.RemoteFile}
 */
proto.filetransfer.RemoteFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.RemoteFile;
  return proto.filetransfer.RemoteFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.RemoteFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.RemoteFile}
 */
proto.filetransfer.RemoteFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcefile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.RemoteFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.RemoteFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.RemoteFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcefile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sourcefile = 1;
 * @return {string}
 */
proto.filetransfer.RemoteFile.prototype.getSourcefile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteFile} returns this
 */
proto.filetransfer.RemoteFile.prototype.setSourcefile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.TimeValues.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.TimeValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.TimeValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.TimeValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStart: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeEnd: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.TimeValues}
 */
proto.filetransfer.TimeValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.TimeValues;
  return proto.filetransfer.TimeValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.TimeValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.TimeValues}
 */
proto.filetransfer.TimeValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.TimeValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.TimeValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.TimeValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.TimeValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeStart();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTimeEnd();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 time_start = 1;
 * @return {number}
 */
proto.filetransfer.TimeValues.prototype.getTimeStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.filetransfer.TimeValues} returns this
 */
proto.filetransfer.TimeValues.prototype.setTimeStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 time_end = 2;
 * @return {number}
 */
proto.filetransfer.TimeValues.prototype.getTimeEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filetransfer.TimeValues} returns this
 */
proto.filetransfer.TimeValues.prototype.setTimeEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.filetransfer.Condition.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.filetransfer.Condition.ConditionValueCase = {
  CONDITION_VALUE_NOT_SET: 0,
  TIME_VALUES: 2,
  PATTERN: 3
};

/**
 * @return {proto.filetransfer.Condition.ConditionValueCase}
 */
proto.filetransfer.Condition.prototype.getConditionValueCase = function() {
  return /** @type {proto.filetransfer.Condition.ConditionValueCase} */(jspb.Message.computeOneofCase(this, proto.filetransfer.Condition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    conditionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeValues: (f = msg.getTimeValues()) && proto.filetransfer.TimeValues.toObject(includeInstance, f),
    pattern: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.Condition}
 */
proto.filetransfer.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.Condition;
  return proto.filetransfer.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.Condition}
 */
proto.filetransfer.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.filetransfer.Condition.ConditionType} */ (reader.readEnum());
      msg.setConditionType(value);
      break;
    case 2:
      var value = new proto.filetransfer.TimeValues;
      reader.readMessage(value,proto.filetransfer.TimeValues.deserializeBinaryFromReader);
      msg.setTimeValues(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConditionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimeValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.filetransfer.TimeValues.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.filetransfer.Condition.ConditionType = {
  CONDITION_TYPE_UNSPECIFIED: 0,
  TIME: 1,
  TIME_RANGE: 2,
  REGEX: 3,
  GLOB: 4
};

/**
 * optional ConditionType condition_type = 1;
 * @return {!proto.filetransfer.Condition.ConditionType}
 */
proto.filetransfer.Condition.prototype.getConditionType = function() {
  return /** @type {!proto.filetransfer.Condition.ConditionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.filetransfer.Condition.ConditionType} value
 * @return {!proto.filetransfer.Condition} returns this
 */
proto.filetransfer.Condition.prototype.setConditionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TimeValues time_values = 2;
 * @return {?proto.filetransfer.TimeValues}
 */
proto.filetransfer.Condition.prototype.getTimeValues = function() {
  return /** @type{?proto.filetransfer.TimeValues} */ (
    jspb.Message.getWrapperField(this, proto.filetransfer.TimeValues, 2));
};


/**
 * @param {?proto.filetransfer.TimeValues|undefined} value
 * @return {!proto.filetransfer.Condition} returns this
*/
proto.filetransfer.Condition.prototype.setTimeValues = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.filetransfer.Condition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filetransfer.Condition} returns this
 */
proto.filetransfer.Condition.prototype.clearTimeValues = function() {
  return this.setTimeValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filetransfer.Condition.prototype.hasTimeValues = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string pattern = 3;
 * @return {string}
 */
proto.filetransfer.Condition.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.Condition} returns this
 */
proto.filetransfer.Condition.prototype.setPattern = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.filetransfer.Condition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.filetransfer.Condition} returns this
 */
proto.filetransfer.Condition.prototype.clearPattern = function() {
  return jspb.Message.setOneofField(this, 3, proto.filetransfer.Condition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filetransfer.Condition.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filetransfer.RemoteDirectoryCondition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.RemoteDirectoryCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.RemoteDirectoryCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conditionList: jspb.Message.toObjectList(msg.getConditionList(),
    proto.filetransfer.Condition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.RemoteDirectoryCondition}
 */
proto.filetransfer.RemoteDirectoryCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.RemoteDirectoryCondition;
  return proto.filetransfer.RemoteDirectoryCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.RemoteDirectoryCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.RemoteDirectoryCondition}
 */
proto.filetransfer.RemoteDirectoryCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePath(value);
      break;
    case 2:
      var value = new proto.filetransfer.Condition;
      reader.readMessage(value,proto.filetransfer.Condition.deserializeBinaryFromReader);
      msg.addCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.RemoteDirectoryCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.RemoteDirectoryCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.filetransfer.Condition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_path = 1;
 * @return {string}
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.getSourcePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteDirectoryCondition} returns this
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.setSourcePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Condition condition = 2;
 * @return {!Array<!proto.filetransfer.Condition>}
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.getConditionList = function() {
  return /** @type{!Array<!proto.filetransfer.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.filetransfer.Condition, 2));
};


/**
 * @param {!Array<!proto.filetransfer.Condition>} value
 * @return {!proto.filetransfer.RemoteDirectoryCondition} returns this
*/
proto.filetransfer.RemoteDirectoryCondition.prototype.setConditionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.filetransfer.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.filetransfer.Condition}
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.addCondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.filetransfer.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filetransfer.RemoteDirectoryCondition} returns this
 */
proto.filetransfer.RemoteDirectoryCondition.prototype.clearConditionList = function() {
  return this.setConditionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.RemoteDirectoryTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.RemoteDirectoryTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sourcePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    destinationPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    remoteServer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.RemoteDirectoryTransfer}
 */
proto.filetransfer.RemoteDirectoryTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.RemoteDirectoryTransfer;
  return proto.filetransfer.RemoteDirectoryTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.RemoteDirectoryTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.RemoteDirectoryTransfer}
 */
proto.filetransfer.RemoteDirectoryTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.filetransfer.RemoteDirectoryTransfer.TransferType} */ (reader.readEnum());
      msg.setTransferType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.RemoteDirectoryTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.RemoteDirectoryTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSourcePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDestinationPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemoteServer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.filetransfer.RemoteDirectoryTransfer.TransferType = {
  TRANSFER_TYPE_UNSPECIFIED: 0,
  PULL: 1,
  PUSH: 2
};

/**
 * optional TransferType transfer_type = 1;
 * @return {!proto.filetransfer.RemoteDirectoryTransfer.TransferType}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.getTransferType = function() {
  return /** @type {!proto.filetransfer.RemoteDirectoryTransfer.TransferType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.filetransfer.RemoteDirectoryTransfer.TransferType} value
 * @return {!proto.filetransfer.RemoteDirectoryTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.setTransferType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string source_path = 2;
 * @return {string}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.getSourcePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteDirectoryTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.setSourcePath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string destination_path = 3;
 * @return {string}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.getDestinationPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteDirectoryTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.setDestinationPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string remote_server = 4;
 * @return {string}
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.getRemoteServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.RemoteDirectoryTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryTransfer.prototype.setRemoteServer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.RemoteDirectoryConditionTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.RemoteDirectoryConditionTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteDirectory: (f = msg.getRemoteDirectory()) && proto.filetransfer.RemoteDirectoryTransfer.toObject(includeInstance, f),
    precondition: (f = msg.getPrecondition()) && proto.filetransfer.Condition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.RemoteDirectoryConditionTransfer;
  return proto.filetransfer.RemoteDirectoryConditionTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.RemoteDirectoryConditionTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.filetransfer.RemoteDirectoryTransfer;
      reader.readMessage(value,proto.filetransfer.RemoteDirectoryTransfer.deserializeBinaryFromReader);
      msg.setRemoteDirectory(value);
      break;
    case 2:
      var value = new proto.filetransfer.Condition;
      reader.readMessage(value,proto.filetransfer.Condition.deserializeBinaryFromReader);
      msg.setPrecondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.RemoteDirectoryConditionTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.RemoteDirectoryConditionTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteDirectory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.filetransfer.RemoteDirectoryTransfer.serializeBinaryToWriter
    );
  }
  f = message.getPrecondition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.filetransfer.Condition.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemoteDirectoryTransfer remote_directory = 1;
 * @return {?proto.filetransfer.RemoteDirectoryTransfer}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.getRemoteDirectory = function() {
  return /** @type{?proto.filetransfer.RemoteDirectoryTransfer} */ (
    jspb.Message.getWrapperField(this, proto.filetransfer.RemoteDirectoryTransfer, 1));
};


/**
 * @param {?proto.filetransfer.RemoteDirectoryTransfer|undefined} value
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer} returns this
*/
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.setRemoteDirectory = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.clearRemoteDirectory = function() {
  return this.setRemoteDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.hasRemoteDirectory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Condition precondition = 2;
 * @return {?proto.filetransfer.Condition}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.getPrecondition = function() {
  return /** @type{?proto.filetransfer.Condition} */ (
    jspb.Message.getWrapperField(this, proto.filetransfer.Condition, 2));
};


/**
 * @param {?proto.filetransfer.Condition|undefined} value
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer} returns this
*/
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.setPrecondition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filetransfer.RemoteDirectoryConditionTransfer} returns this
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.clearPrecondition = function() {
  return this.setPrecondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filetransfer.RemoteDirectoryConditionTransfer.prototype.hasPrecondition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filetransfer.TransferStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.filetransfer.TransferStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filetransfer.TransferStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.TransferStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferredFile: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filetransfer.TransferStatus}
 */
proto.filetransfer.TransferStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filetransfer.TransferStatus;
  return proto.filetransfer.TransferStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filetransfer.TransferStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filetransfer.TransferStatus}
 */
proto.filetransfer.TransferStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferredFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filetransfer.TransferStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filetransfer.TransferStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filetransfer.TransferStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filetransfer.TransferStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferredFile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferred_file = 1;
 * @return {string}
 */
proto.filetransfer.TransferStatus.prototype.getTransferredFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filetransfer.TransferStatus} returns this
 */
proto.filetransfer.TransferStatus.prototype.setTransferredFile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.filetransfer);
